#lang racket
;Inclusion stuff
(require rnrs/mutable-pairs-6)

;Predefined global variables for use in the program.
(define iValue "")
(define tList '())
(define varList '())
(define funcList '())
(define jFlag #f)
(define I 0) ;outer loop index
(define J 0) ;inner loop index


;Helper function that lets an append work as one would expect.
(define (appendList aList bList)
  (set-mcdr! aList (append aList bList))
  )

;Jordan can write his own comments.
(define (ifProcessing tokenList)
  (display "Jordan's job.\n")
  )

;Takes the start of the if statement and then allows the user to
;keep adding any necessary expressions for completing the statement.
;Passes the list of tokens to a function that will handle the
;processing of the if statement.
(define (ifHandler tokenList)
  (display "If statement.\n")
  (set! iValue (read-line))
  (if (equal? iValue "endif")
      (begin (appendList tokenList (list iValue))(ifProcessing tokenList))
      (begin (appendList tokenList (list iValue))(ifHandler tokenList))
      )
  )

;Jordan can write his own comments.
(define (forProcessing tokenList)
  (display "Jordan's job.\n")
  )

;Takes the start of the for loop and then allows the user to keep
;adding any necessary expressions for completing the statement.
;Passes the list of tokens to a function that will handle the
;processing of the for statement.
(define (forHandler tokenList)
  (display "For statement.\n")
  (set! iValue (read-line))
  (cond [(and (equal? iValue "endfor") (not jFlag)) (begin (appendList tokenList (list iValue))(forProcessing tokenList))]
        [(and (equal? iValue "endfor") jFlag)(begin (appendList tokenList (list iValue))(set! jFlag #f)(forHandler tokenList))]
        [(and (equal? (list-ref (string-split iValue) 0) "for") (not jFlag))(begin (appendList tokenList (list iValue))(set! jFlag #t)(forHandler tokenList))]
        [(and (equal? (list-ref (string-split iValue) 0) "for") jFlag)(begin (display "Cannot nest loops more than once.\n")(forHandler tokenList))]
        [else (begin (appendList tokenList (list iValue))(forHandler tokenList))]
      )
  )

;Function checks to see if a passed variable name is a defined variable.
(define (checkVars varName)
  (if (not (zero? (length varList)))
      (for ([i (length varList)])
        (if (equal? (list-ref (list-ref varList i) 0) varName)
            #t
            #f
            )
        )
      #f
      )
  )

;Function checks to see if a passed function name is a defined function.
(define (checkFunc funcName)
  (if (not (zero? (length funcList)))
      (for ([i (length funcList)])
        (if (equal? (list-ref (list-ref funcList i) 0) funcName)
            #t
            #f
            )
        )
      #f
      )
  )

;Can't remember who was assigned these parts.
(define (setVariable varName value)
  (display "Not my job.\n")
  )

;Can't remember who was assigned these parts.
(define (getVariable varName)
  (display "Not my job. Spoiler: use display.\n")
  )

;Checks if the input is correct, then if the variable exists.
(define (inputHandler tokenList)
  (display "Input statement.\n")
  (if (equal? (length tokenList) 2)
      (if (checkVars (list-ref tokenList 1))
          (setVariable (list-ref tokenList 1) (read))
          (display "Variable has not yet been defined.\n")
          )
      (display "Input error, please use: 'input <variable>'.\n")
      )
  )

;Checks if the input is correct, then if the variable exists.
(define (outputHandler tokenList)
  (display "Output statement.\n")
  (if (equal? (length tokenList) 2)
      (if (checkVars (list-ref tokenList 1))
          (getVariable (list-ref tokenList 1))
          (display "Variable has not yet been defined.\n")
          )
      (display "Output error, please use: 'output <variable>'.\n")
      )
  )

;Defines a variable with the given name and the given values.
(define (defineVariable name type)
  (display "Who's job was this?\n")
  )

;Checks if the #definevari command is correct or exists,
;then defines it.
(define (defVarHandler tokenList)
  (display "Define variable statement.\n")
  (if (and (equal? (length tokenList) 3) (or (equal? (list-ref tokenList 2) "integer")(equal? (list-ref tokenList 2) "float")(equal? (list-ref tokenList 2) "boolean")))
      (if (or (number? (list-ref tokenList 1))(equal? (list-ref tokenList 1) "I")(equal? (list-ref tokenList 1) "J")(equal? (list-ref tokenList 1) "+")(equal? (list-ref tokenList 1) "-")(equal? (list-ref tokenList 1) "*")(equal? (list-ref tokenList 1) "/")(equal? (list-ref tokenList 1) "^")(equal? (list-ref tokenList 1) "==")(equal? (list-ref tokenList 1) "<>")(equal? (list-ref tokenList 1) ">=")(equal? (list-ref tokenList 1) "<=")(equal? (list-ref tokenList 1) ">")(equal? (list-ref tokenList 1) "<")(equal? (list-ref tokenList 1) "if")(equal? (list-ref tokenList 1) "then")(equal? (list-ref tokenList 1) "elseif")(equal? (list-ref tokenList 1) "endif")(equal? (list-ref tokenList 1) "for")(equal? (list-ref tokenList 1) "to")(equal? (list-ref tokenList 1) "stepsize")(equal? (list-ref tokenList 1) "do")(equal? (list-ref tokenList 1) "endfor")(equal? (list-ref tokenList 1) "input")(equal? (list-ref tokenList 1) "output"))
          (display "Please do not use reserved words, numbers, or operators.\n")
          (if (or (checkVars (list-ref tokenList 1))(checkFunc (list-ref tokenList 1)))
              (display "Variable has already been defined.\n")
              (defineVariable (list-ref tokenList 1) (list-ref tokenList 2))
              )
          )
      (display "Definition error, please use: '#definevari <varname> <type>'.\n")
      )
  )

;Takes the token list and checks to make sure it isn't taking any 
(define (constFunc tokenList)
  (set! iValue (read-line))
  (cond [(equal? iValue "#definefunc") (begin (appendList tokenList (list iValue)))]
        [(not (number? (index-of (string-split iValue)(list-ref (string-split (list-ref tokenList 0)) 1)))) (begin (display "Recursion is not supported.")(constFunc tokenList))]
        [else (begin (appendList tokenList (list iValue))(constFunc tokenList))]
      )
  )

;Not entirely my job.
(define (defineFunction tokenList)
  (display "I am defining a function.\n")
  (let* ((funcHeader (string-split (list-ref tokenList 0)))
         (funcBody (cdr tokenList))
         (funcName (list-ref funcHeader 1))
         (argsList (cdr (cdr funcHeader))))
    (display funcName)
    (display argsList)
    (display "Do the rest.\n")
    )
  )

;Takes the start of the function and checks if it already exists or
;is otherwise reserved. Then passes it to another function that will
;allow the user to finish the function.
(define (defFuncHandler tokenList)
  (display "Define function statement.\n")
  (if (or (number? (list-ref tokenList 1))(equal? (list-ref tokenList 1) "+")(equal? (list-ref tokenList 1) "-")(equal? (list-ref tokenList 1) "*")(equal? (list-ref tokenList 1) "/")(equal? (list-ref tokenList 1) "^")(equal? (list-ref tokenList 1) "==")(equal? (list-ref tokenList 1) "<>")(equal? (list-ref tokenList 1) ">=")(equal? (list-ref tokenList 1) "<=")(equal? (list-ref tokenList 1) ">")(equal? (list-ref tokenList 1) "<")(equal? (list-ref tokenList 1) "if")(equal? (list-ref tokenList 1) "then")(equal? (list-ref tokenList 1) "elseif")(equal? (list-ref tokenList 1) "endif")(equal? (list-ref tokenList 1) "for")(equal? (list-ref tokenList 1) "to")(equal? (list-ref tokenList 1) "stepsize")(equal? (list-ref tokenList 1) "do")(equal? (list-ref tokenList 1) "endfor")(equal? (list-ref tokenList 1) "input")(equal? (list-ref tokenList 1) "output"))
      (display "Please do not use reserved words, numbers, or operators.\n")
      (if (or (checkVars (list-ref tokenList 1))(checkFunc (list-ref tokenList 1)))
          (display "Function has already been defined.\n")
          (begin (set! tokenList (string-join tokenList))(constFunc tokenList)(defineFunction tokenList))
          )
      )
  )

(define (varHandler tokenList)
  (display "Not mine.\n")
  )

(define (funcHandler tokenList)
  (display "Not mine.\n")
  )

(define (clearHandler tokenList)
  (display "Clear statement.\n")
  )

(define (exprResolve tokenList)
  (display "Don't forget to use recursion with the parathesis.\n")
  )

;Loops through the given line of expression and tokenizes it into
;numbers, letters representing variables or possibly functions,
;operators, and parathesis. Passes the resulting list of tokens to
;a function that will resolve them.
(define (defaultHandler tokenString)
  (let* ((splitList (list '()))
         (subList (list '()))
         (lastVal ""))
    (for ([i (string-length tokenString)])
      (cond [(char-numeric? (string-ref tokenString i))(begin
                                                         (cond [(equal? lastVal "digit") (appendList subList (list (string-ref tokenString i)))]
                                                               [(equal? lastVal "") (begin (appendList subList (list (string-ref tokenString i))) (set! lastVal "digit"))]
                                                               [(equal? lastVal "letter") (begin (appendList splitList (list (list->string subList))) (set! lastVal "digit"))]
                                                               [(equal? lastVal "logic") (begin (appendList splitList (list (list->string subList))) (set! lastVal "digit"))]
                                                         ))]
            [(char-alphabetic? (string-ref tokenString i))(begin
                                                         (cond [(equal? lastVal "letter") (appendList subList (list (string-ref tokenString i)))]
                                                               [(equal? lastVal "") (begin (appendList subList (list (string-ref tokenString i))) (set! lastVal "letter"))]
                                                               [(equal? lastVal "digit") (begin (appendList splitList (list (string->number (list->string subList)))) (set! lastVal "letter"))]
                                                               [(equal? lastVal "logic") (begin (appendList splitList (list (list->string subList))) (set! lastVal "letter"))]
                                                         ))]
            [(char=? (string-ref tokenString i) #\()(begin (appendList splitList (string (string-ref tokenString i)))(set! lastVal ""))]
            [(char=? (string-ref tokenString i) #\))(begin (appendList splitList (string (string-ref tokenString i)))(set! lastVal ""))]
            [(char=? (string-ref tokenString i) #\+)(begin (appendList splitList (string (string-ref tokenString i)))(set! lastVal ""))]
            [(char=? (string-ref tokenString i) #\-)(begin (appendList splitList (string (string-ref tokenString i)))(set! lastVal ""))]
            [(char=? (string-ref tokenString i) #\*)(begin (appendList splitList (string (string-ref tokenString i)))(set! lastVal ""))]
            [(char=? (string-ref tokenString i) #\/)(begin (appendList splitList (string (string-ref tokenString i)))(set! lastVal ""))]
            [(char=? (string-ref tokenString i) #\^)(begin (appendList splitList (string (string-ref tokenString i)))(set! lastVal ""))]
            [(char=? (string-ref tokenString i) #\=)(begin
                                                         (cond [(equal? lastVal "logic") (appendList subList (list (string-ref tokenString i)))]
                                                               [(equal? lastVal "") (begin (appendList subList (list (string-ref tokenString i))) (set! lastVal "logic"))]
                                                               [(equal? lastVal "digit") (begin (appendList splitList (list (string->number (list->string subList)))) (set! lastVal "logic"))]
                                                               [(equal? lastVal "letter") (begin (appendList splitList (list (list->string subList))) (set! lastVal "logic"))]
                                                         ))]
            [(char=? (string-ref tokenString i) #\<)(begin
                                                         (cond [(equal? lastVal "logic") (appendList subList (list (string-ref tokenString i)))]
                                                               [(equal? lastVal "") (begin (appendList subList (list (string-ref tokenString i))) (set! lastVal "logic"))]
                                                               [(equal? lastVal "digit") (begin (appendList splitList (list (string->number (list->string subList)))) (set! lastVal "logic"))]
                                                               [(equal? lastVal "letter") (begin (appendList splitList (list (list->string subList))) (set! lastVal "logic"))]
                                                         ))]
            [(char=? (string-ref tokenString i) #\>)(begin
                                                         (cond [(equal? lastVal "logic") (appendList subList (list (string-ref tokenString i)))]
                                                               [(equal? lastVal "") (begin (appendList subList (list (string-ref tokenString i))) (set! lastVal "logic"))]
                                                               [(equal? lastVal "digit") (begin (appendList splitList (list (string->number (list->string subList)))) (set! lastVal "logic"))]
                                                               [(equal? lastVal "letter") (begin (appendList splitList (list (list->string subList))) (set! lastVal "logic"))]
                                                         ))]
            [else (display "Error.\n")]
            )
      )
    (exprResolve splitList)
    )
  )

;Function tokenizes the input line from the main function.
;It will then check the first string in the list of tokens to see
;which function it should pass control over to next.
(define (chooseTask inValue)
  (display (string-append inValue "\n"))
  (set! tList (string-split inValue))
  (display tList)(newline)
  (cond [(equal? (list-ref tList 0) "if") (ifHandler (list (string-join tList)))]
        [(equal? (list-ref tList 0) "for") (forHandler (list (string-join tList)))]
        [(equal? (list-ref tList 0) "input") (inputHandler tList)]
        [(equal? (list-ref tList 0) "output") (outputHandler tList)]
        [(equal? (list-ref tList 0) "#definevari") (defVarHandler tList)]
        [(equal? (list-ref tList 0) "#definefunc") (defFuncHandler (list (string-join tList)))]
        [(equal? (list-ref tList 0) "#clear") (clearHandler tList)]
        [(checkVars (list-ref tList 0)) (varHandler tList)]
        [(checkFunc (list-ref tList 0)) (funcHandler tList)]
        [else (defaultHandler (list (string-join tList)))]
        )
  )

;Recursivly takes in input until the input is #exit.
;Will pass the input to other functions for processing.
(define (displayLoop)
  (display "UofL>")
  (set! iValue (read-line))
  (if (not (equal? iValue "#exit"))
      (begin (chooseTask iValue)(displayLoop))
      (display "Calculator shutting down.\n")
      )
  )

(define (loadVariables)
  (display "Loaded variables.\n")
  )

(define (loadFunctions)
  (display "Loaded functions.\n")
  )

;Main function, loads the list of functions and variables, then
;passes control to a looping display.
(define (uofl)
  (loadVariables)
  (loadFunctions)
  (displayLoop)
  )